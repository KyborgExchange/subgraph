// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get positionRefId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tierId(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get tickLower(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get tickUpper(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get ownerAccRefId(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get liquidityD8(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get amount0(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get feeAmount0(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }

  get feeAmount1(): BigInt {
    return this._event.parameters[11].value.toBigInt();
  }
}

export class CollectProtocol extends ethereum.Event {
  get params(): CollectProtocol__Params {
    return new CollectProtocol__Params(this);
  }
}

export class CollectProtocol__Params {
  _event: CollectProtocol;

  constructor(event: CollectProtocol) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CollectSettled extends ethereum.Event {
  get params(): CollectSettled__Params {
    return new CollectSettled__Params(this);
  }
}

export class CollectSettled__Params {
  _event: CollectSettled;

  constructor(event: CollectSettled) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get positionRefId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tierId(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get tickLower(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get tickUpper(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get ownerAccRefId(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get liquidityD8(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get amount0(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get feeAmount0(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }

  get feeAmount1(): BigInt {
    return this._event.parameters[11].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipientAccRefId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class GovernanceUpdated extends ethereum.Event {
  get params(): GovernanceUpdated__Params {
    return new GovernanceUpdated__Params(this);
  }
}

export class GovernanceUpdated__Params {
  _event: GovernanceUpdated;

  constructor(event: GovernanceUpdated) {
    this._event = event;
  }

  get governance(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get positionRefId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tierId(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get tickLower(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get tickUpper(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get sender(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get senderAccRefId(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get liquidityD8(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get amount0(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }
}

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get token0(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token1(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get poolId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class SetLimitOrderType extends ethereum.Event {
  get params(): SetLimitOrderType__Params {
    return new SetLimitOrderType__Params(this);
  }
}

export class SetLimitOrderType__Params {
  _event: SetLimitOrderType;

  constructor(event: SetLimitOrderType) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get positionRefId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tierId(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get tickLower(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get tickUpper(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get limitOrderType(): i32 {
    return this._event.parameters[6].value.toI32();
  }
}

export class Settle extends ethereum.Event {
  get params(): Settle__Params {
    return new Settle__Params(this);
  }
}

export class Settle__Params {
  _event: Settle;

  constructor(event: Settle) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get tierId(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get tickEnd(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get tickStart(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get liquidityD8(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get senderAccRefId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get recipientAccRefId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amount0(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get amountInDistribution(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get amountOutDistribution(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get tierData(): Array<BigInt> {
    return this._event.parameters[9].value.toBigIntArray();
  }
}

export class UpdateDefaultParameters extends ethereum.Event {
  get params(): UpdateDefaultParameters__Params {
    return new UpdateDefaultParameters__Params(this);
  }
}

export class UpdateDefaultParameters__Params {
  _event: UpdateDefaultParameters;

  constructor(event: UpdateDefaultParameters) {
    this._event = event;
  }

  get tickSpacing(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get protocolFee(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class UpdatePool extends ethereum.Event {
  get params(): UpdatePool__Params {
    return new UpdatePool__Params(this);
  }
}

export class UpdatePool__Params {
  _event: UpdatePool;

  constructor(event: UpdatePool) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get tickSpacing(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get protocolFee(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class UpdateTier extends ethereum.Event {
  get params(): UpdateTier__Params {
    return new UpdateTier__Params(this);
  }
}

export class UpdateTier__Params {
  _event: UpdateTier;

  constructor(event: UpdateTier) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get tierId(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get sqrtGamma(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get sqrtPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get limitOrderTickSpacingMultiplier(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get senderAccRefId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class Hub__getDefaultParametersResult {
  value0: i32;
  value1: i32;

  constructor(value0: i32, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }

  getTickSpacing(): i32 {
    return this.value0;
  }

  getProtocolFee(): i32 {
    return this.value1;
  }
}

export class Hub__getPoolParametersResult {
  value0: i32;
  value1: i32;

  constructor(value0: i32, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }

  getTickSpacing(): i32 {
    return this.value0;
  }

  getProtocolFee(): i32 {
    return this.value1;
  }
}

export class Hub__getPositionResultValue0Struct extends ethereum.Tuple {
  get liquidityD8(): BigInt {
    return this[0].toBigInt();
  }

  get feeGrowthInside0Last(): BigInt {
    return this[1].toBigInt();
  }

  get feeGrowthInside1Last(): BigInt {
    return this[2].toBigInt();
  }

  get limitOrderType(): i32 {
    return this[3].toI32();
  }

  get settlementSnapshotId(): BigInt {
    return this[4].toBigInt();
  }
}

export class Hub__getTickResultValue0Struct extends ethereum.Tuple {
  get liquidityLowerD8(): BigInt {
    return this[0].toBigInt();
  }

  get liquidityUpperD8(): BigInt {
    return this[1].toBigInt();
  }

  get nextBelow(): i32 {
    return this[2].toI32();
  }

  get nextAbove(): i32 {
    return this[3].toI32();
  }

  get needSettle0(): boolean {
    return this[4].toBoolean();
  }

  get needSettle1(): boolean {
    return this[5].toBoolean();
  }

  get feeGrowthOutside0(): BigInt {
    return this[6].toBigInt();
  }

  get feeGrowthOutside1(): BigInt {
    return this[7].toBigInt();
  }
}

export class Hub__getTierResultValue0Struct extends ethereum.Tuple {
  get liquidity(): BigInt {
    return this[0].toBigInt();
  }

  get sqrtPrice(): BigInt {
    return this[1].toBigInt();
  }

  get sqrtGamma(): i32 {
    return this[2].toI32();
  }

  get tick(): i32 {
    return this[3].toI32();
  }

  get nextTickBelow(): i32 {
    return this[4].toI32();
  }

  get nextTickAbove(): i32 {
    return this[5].toI32();
  }

  get feeGrowthGlobal0(): BigInt {
    return this[6].toBigInt();
  }

  get feeGrowthGlobal1(): BigInt {
    return this[7].toBigInt();
  }
}

export class Hub__swapResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountIn(): BigInt {
    return this.value0;
  }

  getAmountOut(): BigInt {
    return this.value1;
  }
}

export class Hub__swapMultiHopResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountIn(): BigInt {
    return this.value0;
  }

  getAmountOut(): BigInt {
    return this.value1;
  }
}

export class Hub__swapMultiHopInputPStruct extends ethereum.Tuple {
  get path(): Bytes {
    return this[0].toBytes();
  }

  get amountDesired(): BigInt {
    return this[1].toBigInt();
  }

  get recipient(): Address {
    return this[2].toAddress();
  }

  get recipientAccRefId(): BigInt {
    return this[3].toBigInt();
  }

  get senderAccRefId(): BigInt {
    return this[4].toBigInt();
  }

  get data(): Bytes {
    return this[5].toBytes();
  }
}

export class Hub__tokensResult {
  value0: i32;
  value1: BigInt;

  constructor(value0: i32, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getLocked(): i32 {
    return this.value0;
  }

  getProtocolFeeAmt(): BigInt {
    return this.value1;
  }
}

export class Hub__underlyingsResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getToken0(): Address {
    return this.value0;
  }

  getToken1(): Address {
    return this.value1;
  }
}

export class Hub extends ethereum.SmartContract {
  static bind(address: Address): Hub {
    return new Hub("Hub", address);
  }

  accounts(param0: Address, param1: Bytes): BigInt {
    let result = super.call("accounts", "accounts(address,bytes32):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromFixedBytes(param1)
    ]);

    return result[0].toBigInt();
  }

  try_accounts(param0: Address, param1: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accounts",
      "accounts(address,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addTier(
    token0: Address,
    token1: Address,
    sqrtGamma: i32,
    senderAccRefId: BigInt
  ): i32 {
    let result = super.call(
      "addTier",
      "addTier(address,address,uint24,uint256):(uint8)",
      [
        ethereum.Value.fromAddress(token0),
        ethereum.Value.fromAddress(token1),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(sqrtGamma)),
        ethereum.Value.fromUnsignedBigInt(senderAccRefId)
      ]
    );

    return result[0].toI32();
  }

  try_addTier(
    token0: Address,
    token1: Address,
    sqrtGamma: i32,
    senderAccRefId: BigInt
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "addTier",
      "addTier(address,address,uint24,uint256):(uint8)",
      [
        ethereum.Value.fromAddress(token0),
        ethereum.Value.fromAddress(token1),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(sqrtGamma)),
        ethereum.Value.fromUnsignedBigInt(senderAccRefId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  createPool(
    token0: Address,
    token1: Address,
    sqrtGamma: i32,
    sqrtPrice: BigInt,
    senderAccRefId: BigInt
  ): Bytes {
    let result = super.call(
      "createPool",
      "createPool(address,address,uint24,uint128,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(token0),
        ethereum.Value.fromAddress(token1),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(sqrtGamma)),
        ethereum.Value.fromUnsignedBigInt(sqrtPrice),
        ethereum.Value.fromUnsignedBigInt(senderAccRefId)
      ]
    );

    return result[0].toBytes();
  }

  try_createPool(
    token0: Address,
    token1: Address,
    sqrtGamma: i32,
    sqrtPrice: BigInt,
    senderAccRefId: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "createPool",
      "createPool(address,address,uint24,uint128,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(token0),
        ethereum.Value.fromAddress(token1),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(sqrtGamma)),
        ethereum.Value.fromUnsignedBigInt(sqrtPrice),
        ethereum.Value.fromUnsignedBigInt(senderAccRefId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getDefaultParameters(): Hub__getDefaultParametersResult {
    let result = super.call(
      "getDefaultParameters",
      "getDefaultParameters():(uint8,uint8)",
      []
    );

    return new Hub__getDefaultParametersResult(
      result[0].toI32(),
      result[1].toI32()
    );
  }

  try_getDefaultParameters(): ethereum.CallResult<
    Hub__getDefaultParametersResult
  > {
    let result = super.tryCall(
      "getDefaultParameters",
      "getDefaultParameters():(uint8,uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Hub__getDefaultParametersResult(value[0].toI32(), value[1].toI32())
    );
  }

  getPoolParameters(poolId: Bytes): Hub__getPoolParametersResult {
    let result = super.call(
      "getPoolParameters",
      "getPoolParameters(bytes32):(uint8,uint8)",
      [ethereum.Value.fromFixedBytes(poolId)]
    );

    return new Hub__getPoolParametersResult(
      result[0].toI32(),
      result[1].toI32()
    );
  }

  try_getPoolParameters(
    poolId: Bytes
  ): ethereum.CallResult<Hub__getPoolParametersResult> {
    let result = super.tryCall(
      "getPoolParameters",
      "getPoolParameters(bytes32):(uint8,uint8)",
      [ethereum.Value.fromFixedBytes(poolId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Hub__getPoolParametersResult(value[0].toI32(), value[1].toI32())
    );
  }

  getPosition(
    poolId: Bytes,
    owner: Address,
    positionRefId: BigInt,
    tierId: i32,
    tickLower: i32,
    tickUpper: i32
  ): Hub__getPositionResultValue0Struct {
    let result = super.call(
      "getPosition",
      "getPosition(bytes32,address,uint256,uint8,int24,int24):((uint96,uint80,uint80,uint8,uint32))",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(positionRefId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tierId)),
        ethereum.Value.fromI32(tickLower),
        ethereum.Value.fromI32(tickUpper)
      ]
    );

    return changetype<Hub__getPositionResultValue0Struct>(result[0].toTuple());
  }

  try_getPosition(
    poolId: Bytes,
    owner: Address,
    positionRefId: BigInt,
    tierId: i32,
    tickLower: i32,
    tickUpper: i32
  ): ethereum.CallResult<Hub__getPositionResultValue0Struct> {
    let result = super.tryCall(
      "getPosition",
      "getPosition(bytes32,address,uint256,uint8,int24,int24):((uint96,uint80,uint80,uint8,uint32))",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(positionRefId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tierId)),
        ethereum.Value.fromI32(tickLower),
        ethereum.Value.fromI32(tickUpper)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Hub__getPositionResultValue0Struct>(value[0].toTuple())
    );
  }

  getStorageAt(slot: Bytes): Bytes {
    let result = super.call("getStorageAt", "getStorageAt(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(slot)
    ]);

    return result[0].toBytes();
  }

  try_getStorageAt(slot: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getStorageAt",
      "getStorageAt(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(slot)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTick(
    poolId: Bytes,
    tierId: i32,
    tick: i32
  ): Hub__getTickResultValue0Struct {
    let result = super.call(
      "getTick",
      "getTick(bytes32,uint8,int24):((uint96,uint96,int24,int24,bool,bool,uint80,uint80))",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tierId)),
        ethereum.Value.fromI32(tick)
      ]
    );

    return changetype<Hub__getTickResultValue0Struct>(result[0].toTuple());
  }

  try_getTick(
    poolId: Bytes,
    tierId: i32,
    tick: i32
  ): ethereum.CallResult<Hub__getTickResultValue0Struct> {
    let result = super.tryCall(
      "getTick",
      "getTick(bytes32,uint8,int24):((uint96,uint96,int24,int24,bool,bool,uint80,uint80))",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tierId)),
        ethereum.Value.fromI32(tick)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Hub__getTickResultValue0Struct>(value[0].toTuple())
    );
  }

  getTier(poolId: Bytes, tierId: i32): Hub__getTierResultValue0Struct {
    let result = super.call(
      "getTier",
      "getTier(bytes32,uint8):((uint128,uint128,uint24,int24,int24,int24,uint80,uint80))",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tierId))
      ]
    );

    return changetype<Hub__getTierResultValue0Struct>(result[0].toTuple());
  }

  try_getTier(
    poolId: Bytes,
    tierId: i32
  ): ethereum.CallResult<Hub__getTierResultValue0Struct> {
    let result = super.tryCall(
      "getTier",
      "getTier(bytes32,uint8):((uint128,uint128,uint24,int24,int24,int24,uint80,uint80))",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tierId))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Hub__getTierResultValue0Struct>(value[0].toTuple())
    );
  }

  getTiersCount(poolId: Bytes): BigInt {
    let result = super.call(
      "getTiersCount",
      "getTiersCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(poolId)]
    );

    return result[0].toBigInt();
  }

  try_getTiersCount(poolId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTiersCount",
      "getTiersCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(poolId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isSqrtGammaAllowed(poolId: Bytes, sqrtGamma: i32): boolean {
    let result = super.call(
      "isSqrtGammaAllowed",
      "isSqrtGammaAllowed(bytes32,uint24):(bool)",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(sqrtGamma))
      ]
    );

    return result[0].toBoolean();
  }

  try_isSqrtGammaAllowed(
    poolId: Bytes,
    sqrtGamma: i32
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isSqrtGammaAllowed",
      "isSqrtGammaAllowed(bytes32,uint24):(bool)",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(sqrtGamma))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxNumOfTiers(): BigInt {
    let result = super.call("maxNumOfTiers", "maxNumOfTiers():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxNumOfTiers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxNumOfTiers",
      "maxNumOfTiers():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swap(
    tokenIn: Address,
    tokenOut: Address,
    tierChoices: BigInt,
    amountDesired: BigInt,
    recipient: Address,
    recipientAccRefId: BigInt,
    senderAccRefId: BigInt,
    data: Bytes
  ): Hub__swapResult {
    let result = super.call(
      "swap",
      "swap(address,address,uint256,int256,address,uint256,uint256,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(tierChoices),
        ethereum.Value.fromSignedBigInt(amountDesired),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(recipientAccRefId),
        ethereum.Value.fromUnsignedBigInt(senderAccRefId),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new Hub__swapResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_swap(
    tokenIn: Address,
    tokenOut: Address,
    tierChoices: BigInt,
    amountDesired: BigInt,
    recipient: Address,
    recipientAccRefId: BigInt,
    senderAccRefId: BigInt,
    data: Bytes
  ): ethereum.CallResult<Hub__swapResult> {
    let result = super.tryCall(
      "swap",
      "swap(address,address,uint256,int256,address,uint256,uint256,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(tierChoices),
        ethereum.Value.fromSignedBigInt(amountDesired),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(recipientAccRefId),
        ethereum.Value.fromUnsignedBigInt(senderAccRefId),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Hub__swapResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  swapMultiHop(p: Hub__swapMultiHopInputPStruct): Hub__swapMultiHopResult {
    let result = super.call(
      "swapMultiHop",
      "swapMultiHop((bytes,int256,address,uint256,uint256,bytes)):(uint256,uint256)",
      [ethereum.Value.fromTuple(p)]
    );

    return new Hub__swapMultiHopResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_swapMultiHop(
    p: Hub__swapMultiHopInputPStruct
  ): ethereum.CallResult<Hub__swapMultiHopResult> {
    let result = super.tryCall(
      "swapMultiHop",
      "swapMultiHop((bytes,int256,address,uint256,uint256,bytes)):(uint256,uint256)",
      [ethereum.Value.fromTuple(p)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Hub__swapMultiHopResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  tokens(param0: Address): Hub__tokensResult {
    let result = super.call("tokens", "tokens(address):(uint8,uint248)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return new Hub__tokensResult(result[0].toI32(), result[1].toBigInt());
  }

  try_tokens(param0: Address): ethereum.CallResult<Hub__tokensResult> {
    let result = super.tryCall("tokens", "tokens(address):(uint8,uint248)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Hub__tokensResult(value[0].toI32(), value[1].toBigInt())
    );
  }

  underlyings(param0: Bytes): Hub__underlyingsResult {
    let result = super.call(
      "underlyings",
      "underlyings(bytes32):(address,address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new Hub__underlyingsResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_underlyings(param0: Bytes): ethereum.CallResult<Hub__underlyingsResult> {
    let result = super.tryCall(
      "underlyings",
      "underlyings(bytes32):(address,address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Hub__underlyingsResult(value[0].toAddress(), value[1].toAddress())
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _positionController(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AddTierCall extends ethereum.Call {
  get inputs(): AddTierCall__Inputs {
    return new AddTierCall__Inputs(this);
  }

  get outputs(): AddTierCall__Outputs {
    return new AddTierCall__Outputs(this);
  }
}

export class AddTierCall__Inputs {
  _call: AddTierCall;

  constructor(call: AddTierCall) {
    this._call = call;
  }

  get token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get sqrtGamma(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get senderAccRefId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AddTierCall__Outputs {
  _call: AddTierCall;

  constructor(call: AddTierCall) {
    this._call = call;
  }

  get tierId(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get sqrtGamma(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get sqrtPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get senderAccRefId(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipientAccRefId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get tokenIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenOut(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tierChoices(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountDesired(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get recipientAccRefId(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get senderAccRefId(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapMultiHopCall extends ethereum.Call {
  get inputs(): SwapMultiHopCall__Inputs {
    return new SwapMultiHopCall__Inputs(this);
  }

  get outputs(): SwapMultiHopCall__Outputs {
    return new SwapMultiHopCall__Outputs(this);
  }
}

export class SwapMultiHopCall__Inputs {
  _call: SwapMultiHopCall;

  constructor(call: SwapMultiHopCall) {
    this._call = call;
  }

  get p(): SwapMultiHopCallPStruct {
    return changetype<SwapMultiHopCallPStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SwapMultiHopCall__Outputs {
  _call: SwapMultiHopCall;

  constructor(call: SwapMultiHopCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapMultiHopCallPStruct extends ethereum.Tuple {
  get path(): Bytes {
    return this[0].toBytes();
  }

  get amountDesired(): BigInt {
    return this[1].toBigInt();
  }

  get recipient(): Address {
    return this[2].toAddress();
  }

  get recipientAccRefId(): BigInt {
    return this[3].toBigInt();
  }

  get senderAccRefId(): BigInt {
    return this[4].toBigInt();
  }

  get data(): Bytes {
    return this[5].toBytes();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get senderAccRefId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
