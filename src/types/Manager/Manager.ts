// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Manager__getPositionResultPositionStruct extends ethereum.Tuple {
  get liquidityD8(): BigInt {
    return this[0].toBigInt();
  }

  get feeGrowthInside0Last(): BigInt {
    return this[1].toBigInt();
  }

  get feeGrowthInside1Last(): BigInt {
    return this[2].toBigInt();
  }

  get limitOrderType(): i32 {
    return this[3].toI32();
  }

  get settlementSnapshotId(): BigInt {
    return this[4].toBigInt();
  }
}

export class Manager__getPositionResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: i32;
  value4: i32;
  value5: i32;
  value6: Manager__getPositionResultPositionStruct;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: i32,
    value4: i32,
    value5: i32,
    value6: Manager__getPositionResultPositionStruct
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromI32(this.value4));
    map.set("value5", ethereum.Value.fromI32(this.value5));
    map.set("value6", ethereum.Value.fromTuple(this.value6));
    return map;
  }

  getOwner(): Address {
    return this.value0;
  }

  getToken0(): Address {
    return this.value1;
  }

  getToken1(): Address {
    return this.value2;
  }

  getTierId(): i32 {
    return this.value3;
  }

  getTickLower(): i32 {
    return this.value4;
  }

  getTickUpper(): i32 {
    return this.value5;
  }

  getPosition(): Manager__getPositionResultPositionStruct {
    return this.value6;
  }
}

export class Manager__pairsResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getToken0(): Address {
    return this.value0;
  }

  getToken1(): Address {
    return this.value1;
  }
}

export class Manager__positionsByTokenIdResult {
  value0: Address;
  value1: BigInt;
  value2: i32;
  value3: i32;
  value4: i32;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: i32,
    value3: i32,
    value4: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromI32(this.value3));
    map.set("value4", ethereum.Value.fromI32(this.value4));
    return map;
  }

  getOwner(): Address {
    return this.value0;
  }

  getPairId(): BigInt {
    return this.value1;
  }

  getTierId(): i32 {
    return this.value2;
  }

  getTickLower(): i32 {
    return this.value3;
  }

  getTickUpper(): i32 {
    return this.value4;
  }
}

export class Manager extends ethereum.SmartContract {
  static bind(address: Address): Manager {
    return new Manager("Manager", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PERMIT_TYPEHASH(): Bytes {
    let result = super.call(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  WETH9(): Address {
    let result = super.call("WETH9", "WETH9():(address)", []);

    return result[0].toAddress();
  }

  try_WETH9(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH9", "WETH9():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPosition(tokenId: BigInt): Manager__getPositionResult {
    let result = super.call(
      "getPosition",
      "getPosition(uint256):(address,address,address,uint8,int24,int24,(uint96,uint80,uint80,uint8,uint32))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new Manager__getPositionResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toI32(),
      changetype<Manager__getPositionResultPositionStruct>(result[6].toTuple())
    );
  }

  try_getPosition(
    tokenId: BigInt
  ): ethereum.CallResult<Manager__getPositionResult> {
    let result = super.tryCall(
      "getPosition",
      "getPosition(uint256):(address,address,address,uint8,int24,int24,(uint96,uint80,uint80,uint8,uint32))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Manager__getPositionResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toI32(),
        changetype<Manager__getPositionResultPositionStruct>(value[6].toTuple())
      )
    );
  }

  hub(): Address {
    let result = super.call("hub", "hub():(address)", []);

    return result[0].toAddress();
  }

  try_hub(): ethereum.CallResult<Address> {
    let result = super.tryCall("hub", "hub():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  latestTokenId(): BigInt {
    let result = super.call("latestTokenId", "latestTokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_latestTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "latestTokenId",
      "latestTokenId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(param0: BigInt): BigInt {
    let result = super.call("nonces", "nonces(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pairIdsByPoolId(param0: Bytes): BigInt {
    let result = super.call(
      "pairIdsByPoolId",
      "pairIdsByPoolId(bytes32):(uint40)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_pairIdsByPoolId(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pairIdsByPoolId",
      "pairIdsByPoolId(bytes32):(uint40)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pairs(param0: BigInt): Manager__pairsResult {
    let result = super.call("pairs", "pairs(uint40):(address,address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return new Manager__pairsResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_pairs(param0: BigInt): ethereum.CallResult<Manager__pairsResult> {
    let result = super.tryCall("pairs", "pairs(uint40):(address,address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Manager__pairsResult(value[0].toAddress(), value[1].toAddress())
    );
  }

  positionsByTokenId(param0: BigInt): Manager__positionsByTokenIdResult {
    let result = super.call(
      "positionsByTokenId",
      "positionsByTokenId(uint256):(address,uint40,uint8,int24,int24)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Manager__positionsByTokenIdResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32()
    );
  }

  try_positionsByTokenId(
    param0: BigInt
  ): ethereum.CallResult<Manager__positionsByTokenIdResult> {
    let result = super.tryCall(
      "positionsByTokenId",
      "positionsByTokenId(uint256):(address,uint40,uint8,int24,int24)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Manager__positionsByTokenIdResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenDescriptor(): Address {
    let result = super.call(
      "tokenDescriptor",
      "tokenDescriptor():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_tokenDescriptor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenDescriptor",
      "tokenDescriptor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenDescriptorSetter(): Address {
    let result = super.call(
      "tokenDescriptorSetter",
      "tokenDescriptorSetter():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_tokenDescriptorSetter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenDescriptorSetter",
      "tokenDescriptorSetter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _hub(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _WETH9(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get params(): AddLiquidityCallParamsStruct {
    return changetype<AddLiquidityCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get liquidityD8(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount0(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class AddLiquidityCallParamsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get amount0Desired(): BigInt {
    return this[1].toBigInt();
  }

  get amount1Desired(): BigInt {
    return this[2].toBigInt();
  }

  get amount0Min(): BigInt {
    return this[3].toBigInt();
  }

  get amount1Min(): BigInt {
    return this[4].toBigInt();
  }

  get useAccount(): boolean {
    return this[5].toBoolean();
  }
}

export class AddTierCall extends ethereum.Call {
  get inputs(): AddTierCall__Inputs {
    return new AddTierCall__Inputs(this);
  }

  get outputs(): AddTierCall__Outputs {
    return new AddTierCall__Outputs(this);
  }
}

export class AddTierCall__Inputs {
  _call: AddTierCall;

  constructor(call: AddTierCall) {
    this._call = call;
  }

  get token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get sqrtGamma(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get useAccount(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get expectedTierId(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class AddTierCall__Outputs {
  _call: AddTierCall;

  constructor(call: AddTierCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get sqrtGamma(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get sqrtPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get useAccount(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositToExternalCall extends ethereum.Call {
  get inputs(): DepositToExternalCall__Inputs {
    return new DepositToExternalCall__Inputs(this);
  }

  get outputs(): DepositToExternalCall__Outputs {
    return new DepositToExternalCall__Outputs(this);
  }
}

export class DepositToExternalCall__Inputs {
  _call: DepositToExternalCall;

  constructor(call: DepositToExternalCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipientAccRefId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class DepositToExternalCall__Outputs {
  _call: DepositToExternalCall;

  constructor(call: DepositToExternalCall) {
    this._call = call;
  }
}

export class ExactInCall extends ethereum.Call {
  get inputs(): ExactInCall__Inputs {
    return new ExactInCall__Inputs(this);
  }

  get outputs(): ExactInCall__Outputs {
    return new ExactInCall__Outputs(this);
  }
}

export class ExactInCall__Inputs {
  _call: ExactInCall;

  constructor(call: ExactInCall) {
    this._call = call;
  }

  get path(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get amountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountOutMinimum(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get fromAccount(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get toAccount(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }

  get deadline(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class ExactInCall__Outputs {
  _call: ExactInCall;

  constructor(call: ExactInCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExactInSingleCall extends ethereum.Call {
  get inputs(): ExactInSingleCall__Inputs {
    return new ExactInSingleCall__Inputs(this);
  }

  get outputs(): ExactInSingleCall__Outputs {
    return new ExactInSingleCall__Outputs(this);
  }
}

export class ExactInSingleCall__Inputs {
  _call: ExactInSingleCall;

  constructor(call: ExactInSingleCall) {
    this._call = call;
  }

  get tokenIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenOut(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tierChoices(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountIn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountOutMinimum(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get fromAccount(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get toAccount(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }

  get deadline(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class ExactInSingleCall__Outputs {
  _call: ExactInSingleCall;

  constructor(call: ExactInSingleCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExactOutCall extends ethereum.Call {
  get inputs(): ExactOutCall__Inputs {
    return new ExactOutCall__Inputs(this);
  }

  get outputs(): ExactOutCall__Outputs {
    return new ExactOutCall__Outputs(this);
  }
}

export class ExactOutCall__Inputs {
  _call: ExactOutCall;

  constructor(call: ExactOutCall) {
    this._call = call;
  }

  get path(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get amountOut(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountInMaximum(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get fromAccount(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get toAccount(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }

  get deadline(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class ExactOutCall__Outputs {
  _call: ExactOutCall;

  constructor(call: ExactOutCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExactOutSingleCall extends ethereum.Call {
  get inputs(): ExactOutSingleCall__Inputs {
    return new ExactOutSingleCall__Inputs(this);
  }

  get outputs(): ExactOutSingleCall__Outputs {
    return new ExactOutSingleCall__Outputs(this);
  }
}

export class ExactOutSingleCall__Inputs {
  _call: ExactOutSingleCall;

  constructor(call: ExactOutSingleCall) {
    this._call = call;
  }

  get tokenIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenOut(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tierChoices(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountInMaximum(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get fromAccount(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get toAccount(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }

  get deadline(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class ExactOutSingleCall__Outputs {
  _call: ExactOutSingleCall;

  constructor(call: ExactOutSingleCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get params(): MintCallParamsStruct {
    return changetype<MintCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get liquidityD8(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get amount0(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }
}

export class MintCallParamsStruct extends ethereum.Tuple {
  get token0(): Address {
    return this[0].toAddress();
  }

  get token1(): Address {
    return this[1].toAddress();
  }

  get tierId(): i32 {
    return this[2].toI32();
  }

  get tickLower(): i32 {
    return this[3].toI32();
  }

  get tickUpper(): i32 {
    return this[4].toI32();
  }

  get amount0Desired(): BigInt {
    return this[5].toBigInt();
  }

  get amount1Desired(): BigInt {
    return this[6].toBigInt();
  }

  get amount0Min(): BigInt {
    return this[7].toBigInt();
  }

  get amount1Min(): BigInt {
    return this[8].toBigInt();
  }

  get recipient(): Address {
    return this[9].toAddress();
  }

  get useAccount(): boolean {
    return this[10].toBoolean();
  }
}

export class KyborgDepositCallbackCall extends ethereum.Call {
  get inputs(): KyborgDepositCallbackCall__Inputs {
    return new KyborgDepositCallbackCall__Inputs(this);
  }

  get outputs(): KyborgDepositCallbackCall__Outputs {
    return new KyborgDepositCallbackCall__Outputs(this);
  }
}

export class KyborgDepositCallbackCall__Inputs {
  _call: KyborgDepositCallbackCall;

  constructor(call: KyborgDepositCallbackCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class KyborgDepositCallbackCall__Outputs {
  _call: KyborgDepositCallbackCall;

  constructor(call: KyborgDepositCallbackCall) {
    this._call = call;
  }
}

export class KyborgMintCallbackCall extends ethereum.Call {
  get inputs(): KyborgMintCallbackCall__Inputs {
    return new KyborgMintCallbackCall__Inputs(this);
  }

  get outputs(): KyborgMintCallbackCall__Outputs {
    return new KyborgMintCallbackCall__Outputs(this);
  }
}

export class KyborgMintCallbackCall__Inputs {
  _call: KyborgMintCallbackCall;

  constructor(call: KyborgMintCallbackCall) {
    this._call = call;
  }

  get token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount0(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class KyborgMintCallbackCall__Outputs {
  _call: KyborgMintCallbackCall;

  constructor(call: KyborgMintCallbackCall) {
    this._call = call;
  }
}

export class KyborgSwapCallbackCall extends ethereum.Call {
  get inputs(): KyborgSwapCallbackCall__Inputs {
    return new KyborgSwapCallbackCall__Inputs(this);
  }

  get outputs(): KyborgSwapCallbackCall__Outputs {
    return new KyborgSwapCallbackCall__Outputs(this);
  }
}

export class KyborgSwapCallbackCall__Inputs {
  _call: KyborgSwapCallbackCall;

  constructor(call: KyborgSwapCallbackCall) {
    this._call = call;
  }

  get tokenIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class KyborgSwapCallbackCall__Outputs {
  _call: KyborgSwapCallbackCall;

  constructor(call: KyborgSwapCallbackCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RefundETHCall extends ethereum.Call {
  get inputs(): RefundETHCall__Inputs {
    return new RefundETHCall__Inputs(this);
  }

  get outputs(): RefundETHCall__Outputs {
    return new RefundETHCall__Outputs(this);
  }
}

export class RefundETHCall__Inputs {
  _call: RefundETHCall;

  constructor(call: RefundETHCall) {
    this._call = call;
  }
}

export class RefundETHCall__Outputs {
  _call: RefundETHCall;

  constructor(call: RefundETHCall) {
    this._call = call;
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get params(): RemoveLiquidityCallParamsStruct {
    return changetype<RemoveLiquidityCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get feeAmount0(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get feeAmount1(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }
}

export class RemoveLiquidityCallParamsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get liquidityD8(): BigInt {
    return this[1].toBigInt();
  }

  get amount0Min(): BigInt {
    return this[2].toBigInt();
  }

  get amount1Min(): BigInt {
    return this[3].toBigInt();
  }

  get withdrawTo(): Address {
    return this[4].toAddress();
  }

  get collectAllFees(): boolean {
    return this[5].toBoolean();
  }

  get settled(): boolean {
    return this[6].toBoolean();
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SelfPermitCall extends ethereum.Call {
  get inputs(): SelfPermitCall__Inputs {
    return new SelfPermitCall__Inputs(this);
  }

  get outputs(): SelfPermitCall__Outputs {
    return new SelfPermitCall__Outputs(this);
  }
}

export class SelfPermitCall__Inputs {
  _call: SelfPermitCall;

  constructor(call: SelfPermitCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class SelfPermitCall__Outputs {
  _call: SelfPermitCall;

  constructor(call: SelfPermitCall) {
    this._call = call;
  }
}

export class SelfPermitAllowedCall extends ethereum.Call {
  get inputs(): SelfPermitAllowedCall__Inputs {
    return new SelfPermitAllowedCall__Inputs(this);
  }

  get outputs(): SelfPermitAllowedCall__Outputs {
    return new SelfPermitAllowedCall__Outputs(this);
  }
}

export class SelfPermitAllowedCall__Inputs {
  _call: SelfPermitAllowedCall;

  constructor(call: SelfPermitAllowedCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class SelfPermitAllowedCall__Outputs {
  _call: SelfPermitAllowedCall;

  constructor(call: SelfPermitAllowedCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetLimitOrderTypeCall extends ethereum.Call {
  get inputs(): SetLimitOrderTypeCall__Inputs {
    return new SetLimitOrderTypeCall__Inputs(this);
  }

  get outputs(): SetLimitOrderTypeCall__Outputs {
    return new SetLimitOrderTypeCall__Outputs(this);
  }
}

export class SetLimitOrderTypeCall__Inputs {
  _call: SetLimitOrderTypeCall;

  constructor(call: SetLimitOrderTypeCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get limitOrderType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetLimitOrderTypeCall__Outputs {
  _call: SetLimitOrderTypeCall;

  constructor(call: SetLimitOrderTypeCall) {
    this._call = call;
  }
}

export class SetTokenDescriptorCall extends ethereum.Call {
  get inputs(): SetTokenDescriptorCall__Inputs {
    return new SetTokenDescriptorCall__Inputs(this);
  }

  get outputs(): SetTokenDescriptorCall__Outputs {
    return new SetTokenDescriptorCall__Outputs(this);
  }
}

export class SetTokenDescriptorCall__Inputs {
  _call: SetTokenDescriptorCall;

  constructor(call: SetTokenDescriptorCall) {
    this._call = call;
  }

  get descriptor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTokenDescriptorCall__Outputs {
  _call: SetTokenDescriptorCall;

  constructor(call: SetTokenDescriptorCall) {
    this._call = call;
  }
}

export class SetTokenDescriptorSetterCall extends ethereum.Call {
  get inputs(): SetTokenDescriptorSetterCall__Inputs {
    return new SetTokenDescriptorSetterCall__Inputs(this);
  }

  get outputs(): SetTokenDescriptorSetterCall__Outputs {
    return new SetTokenDescriptorSetterCall__Outputs(this);
  }
}

export class SetTokenDescriptorSetterCall__Inputs {
  _call: SetTokenDescriptorSetterCall;

  constructor(call: SetTokenDescriptorSetterCall) {
    this._call = call;
  }

  get setter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTokenDescriptorSetterCall__Outputs {
  _call: SetTokenDescriptorSetterCall;

  constructor(call: SetTokenDescriptorSetterCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UnwrapWETHCall extends ethereum.Call {
  get inputs(): UnwrapWETHCall__Inputs {
    return new UnwrapWETHCall__Inputs(this);
  }

  get outputs(): UnwrapWETHCall__Outputs {
    return new UnwrapWETHCall__Outputs(this);
  }
}

export class UnwrapWETHCall__Inputs {
  _call: UnwrapWETHCall;

  constructor(call: UnwrapWETHCall) {
    this._call = call;
  }

  get amountMinimum(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UnwrapWETHCall__Outputs {
  _call: UnwrapWETHCall;

  constructor(call: UnwrapWETHCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
